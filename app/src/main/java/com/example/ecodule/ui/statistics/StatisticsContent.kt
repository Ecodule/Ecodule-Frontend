package com.example.ecodule.ui.statistics

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.material3.Divider
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalInspectionMode
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.hilt.navigation.compose.hiltViewModel
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import com.example.ecodule.ui.statistics.model.StatisticsViewModel
import java.text.NumberFormat
import java.util.Locale

val bodyStyle = TextStyle(
    fontSize = 28.sp,
    color = Color.Black
)

val boldBodyStyle = TextStyle(
    fontWeight = FontWeight.Bold,
    fontSize = 36.sp,
    color = Color.Black
)

@Composable
fun StatisticsContent(
    modifier: Modifier = Modifier,
    viewModel: StatisticsViewModel? = null // „Éó„É¨„Éì„É•„ÉºÂØæÂøú„ÅÆ„Åü„ÇÅ„Ç™„Éó„Ç∑„Éß„Éä„É´
) {
    val isPreview = LocalInspectionMode.current
    // ÂÆüË°åÊôÇ„ÅÆ„Åø Hilt „Åã„ÇâÂèñÂæóÔºà„Éó„É¨„Éì„É•„ÉºÊôÇ„ÅØ null „ÅÆ„Åæ„ÅæÔºâ
    val vm = viewModel ?: if (!isPreview) hiltViewModel() else null

    // Áä∂ÊÖã„ÅÆË≥ºË™≠Ôºàvm „Åå null „ÅÆÂ†¥Âêà„ÅØ„ÉÄ„Éü„ÉºË°®Á§∫„Å´„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºâ
    val isLoadingUser by (vm?.isLoadingUserStats?.collectAsStateWithLifecycle() ?: androidx.compose.runtime.mutableStateOf(false))
    val userError by (vm?.userStatsError?.collectAsStateWithLifecycle() ?: androidx.compose.runtime.mutableStateOf<String?>(null))
    val userStats by (vm?.userStats?.collectAsStateWithLifecycle() ?: androidx.compose.runtime.mutableStateOf<StatisticsViewModel.UserStatsUiState?>(null))

    val isLoadingOverall by (vm?.isLoadingOverallStats?.collectAsStateWithLifecycle() ?: androidx.compose.runtime.mutableStateOf(false))
    val overallError by (vm?.overallStatsError?.collectAsStateWithLifecycle() ?: androidx.compose.runtime.mutableStateOf<String?>(null))
    val overallStats by (vm?.overallStats?.collectAsStateWithLifecycle() ?: androidx.compose.runtime.mutableStateOf<StatisticsViewModel.OverallStatsUiState?>(null))

    // ÂàùÂõûÂèñÂæó
    LaunchedEffect(vm != null) {
        if (vm != null) {
            vm.fetchUserStatistics()
            vm.fetchOverallStatistics()
        }
    }

    // Ë°®Á§∫Áî®„Éï„Ç©„Éº„Éû„ÉÉ„Éà
    val numberFormatter = NumberFormat.getNumberInstance(Locale.JAPAN).apply {
        maximumFractionDigits = 2
        minimumFractionDigits = 0
    }

    fun formatKg(value: Double?): String =
        value?.let { "${numberFormatter.format(it)} Kg" } ?: "-- Kg"

    fun formatYen(value: Double?): String =
        value?.let { "${numberFormatter.format(it)} ÂÜÜ" } ?: "-- ÂÜÜ"

    // Â∑ÆÂàÜ„ÅÆË°®Á§∫„ÅØ API ‰ªïÊßò„Å´„Å™„ÅÑ„Åü„ÇÅ„ÄÅ„Åì„Åì„Åß„ÅØÁ©∫ÊñáÂ≠ó„ÇíÊ∏°„Åó„ÄÅÂ∞ÜÊù•‰ªïÊßòËøΩÂä†ÊôÇ„Å´Â∑Æ„ÅóÊõø„Åà
    val savingDiffText = ""

    Column(
        modifier = modifier
            .fillMaxSize()
            .padding(24.dp),
        verticalArrangement = Arrangement.Top,
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = "Áµ±Ë®à",
            style = boldBodyStyle,
            color = MaterialTheme.colorScheme.primary,
            modifier = Modifier.padding(bottom = 32.dp)
        )

        // „É¶„Éº„Ç∂„ÉºÁµ±Ë®àÔºàCO2Ôºâ
        when {
            isLoadingUser -> {
                StatItemWithIcon(
                    icon = "üå±",
                    label = "CO‚ÇÇÂâäÊ∏õÈáè",
                    value = "Ë™≠„ÅøËæº„Åø‰∏≠..."
                )
            }
            userError != null -> {
                Text(
                    text = userError ?: "",
                    color = MaterialTheme.colorScheme.error,
                    style = bodyStyle,
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(bottom = 4.dp)
                )
                StatItemWithIcon(
                    icon = "üå±",
                    label = "CO‚ÇÇÂâäÊ∏õÈáè",
                    value = formatKg(userStats?.co2Reduction)
                )
            }
            else -> {
                StatItemWithIcon(
                    icon = "üå±",
                    label = "CO‚ÇÇÂâäÊ∏õÈáè",
                    value = formatKg(userStats?.co2Reduction)
                )
            }
        }

        // „É¶„Éº„Ç∂„ÉºÁµ±Ë®àÔºàÈáëÈ°çÔºâ: Â∑ÆÂàÜË°®Á§∫„ÅØÁ©∫ÔºàAPIÊú™ÂØæÂøúÔºâ
        when {
            isLoadingUser -> {
                StatItemWithIconAndDifference(
                    icon = "üí¥",
                    label = "‰ªäÊúà„ÅÆÁØÄÁ¥ÑÈ°ç",
                    value = "Ë™≠„ÅøËæº„Åø‰∏≠...",
                    difference = savingDiffText,
                    differenceColor = Color.Blue
                )
            }
            userError != null -> {
                StatItemWithIconAndDifference(
                    icon = "üí¥",
                    label = "‰ªäÊúà„ÅÆÁØÄÁ¥ÑÈ°ç",
                    value = formatYen(userStats?.moneySaved),
                    difference = savingDiffText,
                    differenceColor = Color.Blue
                )
            }
            else -> {
                StatItemWithIconAndDifference(
                    icon = "üí¥",
                    label = "‰ªäÊúà„ÅÆÁØÄÁ¥ÑÈ°ç",
                    value = formatYen(userStats?.moneySaved),
                    difference = savingDiffText,
                    differenceColor = Color.Blue
                )
            }
        }

        // ÂÖ®‰ΩìÁµ±Ë®àÔºàÂÖ®„É¶„Éº„Ç∂„ÉºCO2Ôºâ
        when {
            isLoadingOverall -> {
                StatItemWithIcon(
                    icon = "üå±",
                    label = "ÂÖ®„É¶„Éº„Ç∂„Éº„ÅÆCO‚ÇÇÂâäÊ∏õÈáè",
                    value = "Ë™≠„ÅøËæº„Åø‰∏≠..."
                )
            }
            overallError != null -> {
                Text(
                    text = overallError ?: "",
                    color = MaterialTheme.colorScheme.error,
                    style = bodyStyle,
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(bottom = 4.dp)
                )
                StatItemWithIcon(
                    icon = "üå±",
                    label = "ÂÖ®„É¶„Éº„Ç∂„Éº„ÅÆCO‚ÇÇÂâäÊ∏õÈáè",
                    value = formatKg(overallStats?.totalCo2Reduction)
                )
            }
            else -> {
                StatItemWithIcon(
                    icon = "üå±",
                    label = "ÂÖ®„É¶„Éº„Ç∂„Éº„ÅÆCO‚ÇÇÂâäÊ∏õÈáè",
                    value = formatKg(overallStats?.totalCo2Reduction)
                )
            }
        }

//        // ‰ªïÊßòÊ¨°Á¨¨„Åß„Çä„Çì„ÅîË°®Á§∫„ÇíÂÜçÈñã
//        StatItemWithIcon(
//            icon = "üçé",
//            label = "ÈõÜ„ÇÅ„Åü„Çä„Çì„Åî„ÅÆÊï∞",
//            value = "${appleCount} ÂÄã"
//        )
    }
}

@Composable
fun ThinDivider(
    color: Color = Color.LightGray
) {
    Divider(
        color = color,
        thickness = 1.dp,
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp)
    )
}

@Composable
fun StatItemWithIcon(
    icon: String,
    label: String,
    value: String
) {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        modifier = Modifier.padding(bottom = 16.dp)
    ) {
        Row(verticalAlignment = Alignment.CenterVertically) {
            Text(
                text = icon,
                style = bodyStyle,
                modifier = Modifier.padding(end = 8.dp)
            )
            Text(
                text = label,
                style = bodyStyle,
            )
        }
        Text(
            text = value,
            style = boldBodyStyle,
        )
        ThinDivider()
    }
}

@Composable
fun StatItemWithIconAndDifference(
    icon: String,
    label: String,
    value: String,
    difference: String,
    differenceColor: Color = Color.Gray
) {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        modifier = Modifier.padding(bottom = 16.dp)
    ) {
        Row(verticalAlignment = Alignment.CenterVertically) {
            Text(
                text = icon,
                style = bodyStyle,
                modifier = Modifier.padding(end = 8.dp)
            )
            Text(
                text = label,
                style = bodyStyle,
            )
        }
        Row(
            verticalAlignment = Alignment.Bottom,
            horizontalArrangement = Arrangement.Center
        ) {
            Text(
                text = value,
                style = boldBodyStyle,
            )
            Spacer(modifier = Modifier.width(8.dp))
            Text(
                text = difference,
                fontSize = 30.sp,
                color = differenceColor
            )
        }
        ThinDivider()
    }
}

@Preview
@Composable
fun StatisticsContentPreview() {
    // „Éó„É¨„Éì„É•„Éº„Åß„ÅØ Hilt/ViewModel „Çí‰Ωø„Çè„Åö„ÉÄ„Éü„ÉºË°®Á§∫
    StatisticsContent()
}